# frozen_string_literal: true

module IdNemlogIn
  class NemlogInOmniauth < OmniauthMethods::Base
    include NemlogInVerification

    ENVIRONMENTS = {
      pre_production_integration: {
        # https://www.nemlog-in.dk/vejledningertiltestmiljo/forside/test-som-tjenesteudbyder-eller-broker/
        # But the certificates from `production_integration` are used, because the ones from `pre_production_integration` give "Invalid Signature on SAML Response"
        metadata_xml_file: File.join(IdNemlogIn::Engine.root, 'config', 'saml', 'idp_metadata', 'pre_production_integration.xml')
      },
      production_integration: {
        # https://tu.nemlog-in.dk/oprettelse-og-administration-af-tjenester/log-in/dokumentation.og.guides/integrationstestmiljo/
        metadata_xml_file: File.join(IdNemlogIn::Engine.root, 'config', 'saml', 'idp_metadata', 'production_integration.xml')
      },
      production: {
        # https://tu.nemlog-in.dk/oprettelse-og-administration-af-tjenester/log-in/dokumentation.og.guides/produktionsmiljo/
        metadata_xml_file: File.join(IdNemlogIn::Engine.root, 'config', 'saml', 'idp_metadata', 'production.xml')
      }
    }.freeze

    # When Nemlog-in sends us a SAML response, we need to identify/authenticate the user.
    # For that, we need Nemlog-in to pass us a JWT token (generated by us).
    #
    # Normally, we would do it with sth like `assertion_consumer_service_url: 'https://example.com/auth/nemlog_in/callback?token=123'`,
    # but Nemlog-in always sends response to assertion_consumer_service_url specified in our SP metadata (no params).
    # So, we cannot use this method.
    #
    # Another method is to use RelayState SAML param. The only issue is Nemlog-in gives an error
    # if RelayEstate is longer than 512 chars. So, we use a specific shortened token for it, generated in `replace_token_param`.
    #
    # The whole flow:
    # 1. FE sends request to BE http://example.com/auth/nemlog_in?token=123456789_long_token (see NemlogInButton.tsx)
    # 2. In replace_token_param, we replace token with shortened one token=123_short_token
    # 3. Using idp_sso_target_url_runtime_params, we add RelayState param to Nemlog-in request (along with SAMLRequest param)
    # 4. Nemlog-in redirects to our assertion_consumer_service_url with RelayState param
    # 5. We fetch the token from RelayState param using fetch_token
    #
    def fetch_token(request)
      super || request.params['RelayState']
    end
    protected_methods :fetch_token

    def replace_token_param!(env)
      request = Rack::Request.new(env)
      if request.path == '/auth/nemlog_in'
        token = request.params['token']
        return if token.blank?

        user = AuthToken::AuthToken.new(token: token).entity_for(User)
        short_token_payload = user.to_token_payload.slice(:sub, :exp)
        short_token = AuthToken::AuthToken.new(payload: short_token_payload).token

        env['rack.request.query_hash']['token'] = short_token
      end
    end

    def profile_to_user_attrs(auth)
      first_name    = auth.extra.raw_info['https://data.gov.dk/model/core/eid/firstName']
      last_name     = auth.extra.raw_info['https://data.gov.dk/model/core/eid/lastName']
      cpr_number    = auth.extra.raw_info['https://data.gov.dk/model/core/eid/cprNumber']

      {
        first_name: first_name,
        last_name: last_name,
        custom_field_values: {
          municipality_code: fetch_municipality_code(cpr_number)
        }
      }
    end

    def omniauth_setup(configuration, env)
      return unless Verification::VerificationService.new.active?(configuration, name)

      verification_config = config

      metadata_file = ENVIRONMENTS.dig(verification_config[:environment].to_sym, :metadata_xml_file)

      idp_metadata_parser = OneLogin::RubySaml::IdpMetadataParser.new
      idp_metadata = idp_metadata_parser.parse_to_hash(File.read(metadata_file))

      metadata = idp_metadata.merge({
        issuer: verification_config[:issuer],

        # without it (or with assertion_consumer_service_url: nil), localtunnes gives "502 Bad Gateway nginx/1.17.9"
        # after clicking "Verify with MitID" on https://nemlogin-k3kd.loca.lt/auth/nemlog_in?token=eyJhbGc...
        # Probably, because the request has a token and so the size of request is too big
        # <samlp:AuthnRequest AssertionConsumerServiceURL='https://nemlogin-k3kd.loca.lt/auth/nemlog_in/callback?token=eyJhbG
        # Nemlog-in also fails without this line.
        assertion_consumer_service_url: redirect_uri(configuration),

        # certificate: verification_config[:certificate], # not required as it's used in our SP metadata file, which is uploaded to NemLog-in
        private_key: verification_config[:private_key], # should start with "-----BEGIN PRIVATE KEY-----". "Bag Attributes" part should be removed
        # Transform `token` param to `RelayState`, which is preserved by SAML.
        # Nemlog-in gives error if it's longer than 512 chars.
        idp_sso_target_url_runtime_params: { token: :RelayState },

        security: {
          authn_requests_signed: true, # using false gives "A technical error has occurred" on https://test-devtest4-nemlog-in.pp.mitid.dk/
          signature_method: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
          # Any of these gives "A technical error has occurred" on https://test-devtest4-nemlog-in.pp.mitid.dk/
          # digest_method: 'http://www.w3.org/2000/09/xmldsig#sha1',
          # signature_method: 'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
        }
      })

      env['omniauth.strategy'].options.merge!(metadata)
    end

    def updateable_user_attrs
      %i[custom_field_values]
    end

    def locked_custom_fields
      %i[municipality_code]
    end

    def locked_attributes
      %i[]
    end

    def logout_url; end

    private

    def fetch_municipality_code(_cpr_number)
      '0101'
    end

    def redirect_uri(configuration)
      "#{configuration.base_backend_uri}/auth/nemlog_in/callback"
    end
  end
end
