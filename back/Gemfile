# frozen_string_literal: true

source 'https://rubygems.org'

git_source(:github) do |repo_name|
  repo_name = "#{repo_name}/#{repo_name}" unless repo_name.include?('/')
  "https://github.com/#{repo_name}.git"
end

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 6.1.7.3'
# Use postgresql as the database for Active Record
gem 'pg' # , '~> 0.18'
# Use Puma as the app server
gem 'puma', '~> 6.2.2'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
# gem 'jbuilder', '~> 2.5'
# Use Redis adapter to run Action Cable in production
# gem 'redis', '~> 3.0'
# Use ActiveModel has_secure_password
gem 'bcrypt', '~> 3.1.7'

# Use Capistrano for deployment
# gem 'capistrano-rails', group: :development

# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible
gem 'rack-cors'

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: %i[mri mingw x64_mingw]
  gem 'pry'
  gem 'pry-byebug'
  gem 'pry-rails'
  gem 'pry-rescue'
  gem 'database_cleaner', '~> 2.0.1'
  gem 'factory_bot_rails'
  gem 'license_finder'
  # Use module prepend to patch NET::HTTP to avoid stack level too deep errors.
  # The errors are due to a conflict between patches that are using two
  # different patching methods (method aliasing vs module prepend).
  # Here, rack-mini-profiler conflicts with sentry-ruby which patches NET::HTTP
  # with prepend.
  # See https://github.com/MiniProfiler/rack-mini-profiler#nethttp-stack-level-too-deep-errors
  gem 'rack-mini-profiler', require: %w[prepend_net_http_patch rack-mini-profiler]
  gem 'rspec_api_documentation'
  gem 'rspec_junit_formatter'
  gem 'rspec-rails', '~> 6.0.1'
  gem 'rspec-parameterized'
  gem 'rspec-sqlimit'
  gem 'rspec-its'
  gem 'rubocop', require: false
  gem 'rubocop-ast', require: false
  gem 'rubocop-performance', require: false
  gem 'rubocop-rails', require: false
  gem 'rubocop-rspec', require: false
  gem 'bundler-audit', require: false
  gem 'saharspec'
  gem 'simplecov'
  gem 'simplecov-rcov'
  gem 'test-prof', '~> 1.2'
  gem 'vcr', '~> 6.1'
end

group :development do
  gem 'bullet'
  gem 'listen', '>= 3.0.5', '< 4.0'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'redcarpet'
  gem 'spring'
  gem 'spring-commands-rspec'
  gem 'spring-watcher-listen', '~> 2.0.0'
  gem 'annotate'
end

group :test do
  gem 'rubyXL'
  gem 'shoulda-matchers', '~> 5.3.0'
  gem 'webmock', '~> 3.18'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
# gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]

gem 'pundit', '~> 2.3.0'
gem 'active_model_serializers', '~> 0.10.12'

gem 'jwt', '~> 2.7.0'
gem 'que', git: 'https://github.com/que-rb/que', branch: 'master', ref: '77c6b92952b821898c393239ce0e4047b17d7dae'
gem 'sinatra', '~> 3.0.6' # Fixes CVE-2022-45442. Sinatra is a dependency of que-web, but que-web depends on sinatra >= 0.
gem 'que-web'

gem 'activerecord-import', '~> 1.4'
gem 'activerecord_json_validator', '~> 1.3.0'
gem 'activerecord-postgis-adapter', '~> 7.1.1'

gem 'carrierwave', '~> 3.0.0.beta'
gem 'carrierwave-base64', '~> 2.10'
gem 'fog-aws', '~> 3.18'

gem 'api-pagination', '~> 5.0.0'
gem 'kaminari', '~> 1.2'
gem 'rails-i18n', '~> 7.0.6'
gem 'awesome_nested_set', '~> 3.5.0'
gem 'axlsx', '3.0.0.pre'
gem 'counter_culture', '~> 3.3'
gem 'groupdate', '~> 4.1'
gem 'interactor'
gem 'interactor-rails'
gem 'liquid', '~> 4.0'
gem 'mini_magick', '~> 4.12'
gem 'pg_search', '~> 2.3.5'
gem 'premailer-rails', '~> 1.12.0'
gem 'rest-client'
gem 'rgeo-geojson'
gem 'rubyzip', '~> 1.3.0'
gem 'stackprof', '~> 0.2.25'
gem 'nokogiri', '~> 1.14.3'

gem 'okcomputer'
gem 'omniauth', '~> 1.9.1'
gem 'omniauth-saml', '~> 1.10.3'
gem 'omniauth-rails_csrf_protection'
gem 'omniauth-facebook'
gem 'omniauth-google-oauth2'
gem 'sentry-ruby'
gem 'sentry-rails'
gem 'simple_segment', '~>1.5'
gem 'omniauth_openid_connect'
gem 'acts_as_list', '~> 1.1'
gem 'bunny', '>= 2.7.2'
gem 'faker'
gem 'order_as_specified'
# Forked to support a userinfo response in JWT form
# Can go back to vanilla when this PR is merged and released:
# https://github.com/nov/openid_connect/pull/48
gem 'openid_connect', github: 'CitizenLabDotCo/openid_connect'
gem 'scenic'
gem 'ice_cube', '~> 0.16'

# Also required here to be able to initialize Mailgun in
# e.g. production.rb, which would otherwise result in an
# "undefined method 'mailgun_settings=' for ActionMailer::Base:Class"
# exception.
gem 'aws-sdk-s3', '~> 1'
gem 'bootsnap', '~> 1', require: false
gem 'dalli', '~> 3.2.4'
gem 'mailgun-ruby', '~>1.2.8'
gem 'rails_semantic_logger'
gem 'rinku', '~> 2'
# For serialization of heterogeneous collections (i.e. notifications), see
# https://github.com/Netflix/fast_jsonapi/pull/410.
gem 'fast_jsonapi', github: 'dvandersluis/fast_jsonapi', branch: 'heterogeneous-collection'
gem 'rack-attack', '~> 6'

# mjml-rails cannot find the MJML parser when installed
# through the emails engine and is therefore specified
# in the main app.
gem 'intercom', '~> 4.2'
gem 'mjml-rails', '~> 4.8'
gem 'cloudfront-rails', '~> 0.4'

# Included here because of CVE-2022-32209.
# See https://groups.google.com/g/rubyonrails-security/c/ce9PhUANQ6s
# The gem is a dependency of Rails, but we use Rails 6.1.6 and no Rails upgrade is available yet.
# Specifying this gem explicitly can probably be removed when the Rails upgrade is available.
gem 'rails-html-sanitizer', '>= 1.4.3'

Dir.children('engines/free').each do |engine_name|
  path = "engines/free/#{engine_name}"
  gem engine_name, path: path if File.directory?(path)
end

gem 'ros-apartment', require: 'apartment'

commercial_engines = [
  'multi_tenancy',

  'admin_api',
  'analytics',
  'bulk_import_ideas',
  'content_builder',
  'custom_idea_statuses',
  'custom_maps',
  'flag_inappropriate_content',
  'geographic_dashboard',
  'google_tag_manager',
  'granular_permissions',
  'idea_assignment',
  'idea_custom_fields',
  'impact_tracking',
  'insights',
  'machine_translations',
  'matomo',
  'moderation',
  'nlp',
  'posthog_integration',
  'public_api',
  'remove_vendor_branding',
  'report_builder',
  'smart_groups',
  'texting',
  'user_custom_fields',

  # ID verification engines.
  # Engines that registers verification methods must be installed before the
  # verification engine.
  'id_auth0',
  'id_bogus',
  'id_bosa_fas',
  'id_clave_unica',
  'id_cow',
  'id_franceconnect',
  'id_gent_rrn',
  'id_id_card_lookup',
  'id_oostende_rrn',
  # The `id_vienna_saml` engine actually registers an authentication method rather
  # than a verification method, so the constraint does not apply. However, we still
  # group it with the other "id_" engines.
  'id_vienna_saml',
  'verification'
]

commercial_engines.each do |engine_name|
  path = "engines/commercial/#{engine_name}"
  gem engine_name, path: path if File.directory?(path)
end
