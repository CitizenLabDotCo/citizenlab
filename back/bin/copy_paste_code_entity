#!/usr/bin/env ruby

# Usage:
# back/bin/copy_paste_code_entity initiative_resubmitted_for_review new_cosponsor_added # copy campaign and notification
# back/bin/copy_paste_code_entity criipto id_austria # copy SSO/ID provider
#
# First argument is the name of a code entity (underscored) that should be used as an example (source).
# Second argument is the name of a code entity (underscored) that should be added (target).
#
# This script copies all git-added files containing the name of the source name
# and replaces the source code entity name with the target code entity name.
# In all git-added files that contain a line with the source code entity name, it adds the same line,
# but with the target code entity name.
#
# Requirements:
# - Ruby and installed activesupport gem
# - All source files should be committed to git and not deleted

require 'fileutils'
require 'active_support/all'

# path to your application root.
APP_ROOT = File.expand_path('../..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

source_code_entity = ARGV[0] # underscored
target_code_entity = ARGV[1] # underscored

def replace_name(content, source_code_entity, target_code_entity)
  content.gsub(source_code_entity, target_code_entity)
    .gsub(source_code_entity.camelize, target_code_entity.camelize)
    .gsub(source_code_entity.camelize(:lower), target_code_entity.camelize(:lower))
    .gsub(source_code_entity.upcase, target_code_entity.upcase)
end

def includes_name?(content, name)
  content.match?(/#{name}|#{name.camelize}|#{name.camelize(:lower)}|#{name.upcase}/)
end

FileUtils.chdir APP_ROOT do
  all_files = `git ls-files`.split("\n")
  new_files = all_files.select { |file| includes_name?(file, source_code_entity) }

  new_files.each do |source_file|
    result_file = replace_name(source_file, source_code_entity, target_code_entity)
    FileUtils.mkdir_p File.dirname(result_file)

    result_content = replace_name(File.read(source_file), source_code_entity, target_code_entity)

    File.write(result_file, result_content)
  end

  files_to_edit = (all_files - new_files).select do |file|
    if (file.include?('/locales/') && !file.include?('/locales/en.yml')) ||
      (file.include?('/translations/') && !file.include?('/translations/en.json'))
      false
    else
      includes_name?(File.read(file), source_code_entity)
    end
  rescue ArgumentError => e
    raise unless e.message == 'invalid byte sequence in UTF-8'
  end - [$0]

  files_to_edit.each do |file|
    lines = File.read(file).split("\n")
    content = lines.each_with_index do |line, i|
      if includes_name?(line, source_code_entity)
        lines[i] = [replace_name(line, source_code_entity, target_code_entity), line].join("\n")
      end
    end.join("\n") + "\n"
    File.write(file, content)
  end
end
