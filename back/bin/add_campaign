#!/usr/bin/env ruby

# Usage:
# back/bin/add_campaign initiative_resubmitted_for_review new_cosponsor_added
#
# First argument is the name of a campaign (underscored) that should be used as an example.
# Second argument is the name of a campaign (underscored) that should be added.
#
# This script copies all git-added files containing the name of the example campaign
# and replaces the example campaign name with the result campaign name.
# In all git-added files that contain a line with the example campaign name, it adds the same line,
# but with the result campaign name.
#
# Requirements:
# Ruby and installed activesupport gem

require 'fileutils'
require 'active_support/all'

# path to your application root.
APP_ROOT = File.expand_path('../..', __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

example_campaign = ARGV[0] # underscored
result_campaign = ARGV[1] # underscored

def replace_campaign(content, example_campaign, result_campaign)
  content.gsub(example_campaign, result_campaign)
    .gsub(example_campaign.camelize, result_campaign.camelize)
    .gsub(example_campaign.camelize(:lower), result_campaign.camelize(:lower))
end

def example_campaign_regex_string(campaign)
  "#{campaign}|#{campaign.camelize}|#{campaign.camelize(:lower)}"
end

def includes_campaign?(content, campaign)
  content.match?(Regexp.new(example_campaign_regex_string(campaign)))
end

example_campaign_regex = example_campaign_regex_string(example_campaign)

FileUtils.chdir APP_ROOT do
  new_files = `git ls-files | grep -E "#{example_campaign_regex}"`.split("\n")

  new_files.each do |example_file|
    result_file = replace_campaign(example_file, example_campaign, result_campaign)
    FileUtils.mkdir_p File.dirname(result_file)

    result_content = replace_campaign(File.read(example_file), example_campaign, result_campaign)

    File.write(result_file, result_content)
  end

  files_to_edit = `git ls-files | grep -vE "#{example_campaign_regex}" | xargs grep -lE "#{example_campaign_regex}"`
  files_to_edit = files_to_edit.split("\n") - [$0] # exclude this script

  files_to_edit.each do |file|
    lines = File.read(file).split("\n")
    content = lines.each_with_index do |line, i|
      if includes_campaign?(line, example_campaign)
        lines[i] = [replace_campaign(line, example_campaign, result_campaign), line].join("\n")
      end
    end.join("\n") + "\n"
    File.write(file, content)
  end
end
