version: 2.1

orbs:
  slack: circleci/slack@4.3.3

# REUSABLE YAML FRAGMENTS (yml anchors)
slack-fail-post-step-templates: &slack-fail-post-step-templates
  post-steps:
    - slack/notify:
        event: fail
        mentions: ":boom: FAILURE: Tenant templates workflow failed to release new template versions."
        template: basic_fail_1

slack-fail-post-step-inconsistent-data: &slack-fail-post-step-inconsistent-data
  post-steps:
    - slack/notify:
        event: fail
        mentions: ":boom: FAILURE: Some data is likely invalid."
        template: basic_fail_1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  back: # corresponds to the name of the package
    type: boolean
    default: false

  front: # corresponds to the name of the package
    type: boolean
    default: false

  run_deploy:
    type: boolean
    default: false

  image_tag:
    type: string
    default: ""

  e2e:
    type: boolean
    default: false

  templates:
    type: boolean
    default: false

executors:
  cl2-back:
    parameters:
      image-tag:
        type: string
    docker:
      - image: citizenlabdotco/back-ee:<< parameters.image-tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
      - image: "postgis/postgis:12-3.1"
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

commands:
  wait-for-postgres:
    steps:
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

  echo_pipeline_parameters:
    steps:
      - run: |
          echo "trigger: << pipeline.parameters.trigger >>"
          echo "back: << pipeline.parameters.back >>"
          echo "front: << pipeline.parameters.front >>"
          echo "run_deploy: << pipeline.parameters.run_deploy >>"
          echo "image_tag: << pipeline.parameters.image_tag >>"

  copy_secrets_from_lastpass:
    steps:
      - run: |
          if command -v sudo &> /dev/null
          then
            sudo apt-get update && sudo apt-get install -y lastpass-cli
          else
            apt-get update && apt-get install -y lastpass-cli
          fi
      - run: echo $LASTPASS_PASSWORD | LPASS_DISABLE_PINENTRY=1 lpass login ${LASTPASS_EMAIL}
      - run: lpass show --notes 'citizenlab back-secret.env' > env_files/back-secret.env
      - run: lpass show --notes 'citizenlab front-secret.env' > env_files/front-secret.env
  shallow-clone:
    steps:
      - run: mkdir ~/.ssh
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      # Git clone can fail when the repository directory exists and is not empty. This
      # can happen when e.g. setting the working_directory to ~/citizenlab/front because
      # CircleCI will create those directories in this case. The solution is to remove
      # the created directories before cloning. The name of the directory to remove is
      # inferred from the repository URL (the part between the "/" and "." characters).
      - run: |
          cd ~
          rm -rf ~/$(echo $CIRCLE_REPOSITORY_URL | cut -d '/' -f 2 | cut -d '.' -f 1)
          git clone -b "$CIRCLE_BRANCH" "$CIRCLE_REPOSITORY_URL" --depth 1

jobs:
  trigger-workflows:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh

  danger-check:
    resource_class: small
    docker:
      - image: citizenlabdotco/cl2-devops-danger-check
    working_directory: ~/citizenlab
    steps:
      - shallow-clone
      - run: danger ci

  changelogger:
    resource_class: small
    docker:
      - image: citizenlabdotco/cl2-devops-changelogger:master
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: /app
    steps:
      - run: ruby script.rb

  slack-invalid-data-success:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  # BACK-END
  back-bundle-audit:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: development
    steps:
      # CVE-2015-9284 is "CSRF vulnerability in OmniAuth's request phase"
      # Solution: upgrade to '>= 2.0.0'
      # But we can't, due to unmaintained gems that don't work with Omniauth 2.0.
      # See https://github.com/rubysec/bundler-audit
      - run: bundle exec bundle-audit check --update --ignore CVE-2015-9284

  back-license-check:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    steps:
      - run: bundle exec license_finder

  back-build-docker-image:
    working_directory: ~/
    docker:
      - image: cimg/base:2021.03
    steps:
      - echo_pipeline_parameters
      - shallow-clone
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          docker build -t citizenlabdotco/back-ee:$CIRCLE_SHA1 --build-arg CITIZENLAB_EE=true -f citizenlab/back/Dockerfile citizenlab/.
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push citizenlabdotco/back-ee:$CIRCLE_SHA1

  back-lint:
    resource_class: medium
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: development
    steps:
      - run: bundle exec rubocop -P --format simple

  back-test:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 8
    environment:
      RAILS_ENV: test
      COVERAGE: ON
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/*/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --profile --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports

  back-test-tenant-templates:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
    steps:
      - run: mkdir -p workspace
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: SPEC_OPTS="-t template_test -P "spec/**/*_spec.rb"" bundle exec rspec
      - run: SPEC_OPTS="-t template_test -P "engines/*/*/spec/**/*_spec.rb"" bundle exec rspec
      - run:
          command: rake templates:verify['workspace/failed-templates.txt']
          no_output_timeout: 60m
      - persist_to_workspace:
          root: workspace
          paths:
            - failed-templates.txt

  back-release-tenant-templates:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: rake templates:release['/tmp/workspace/failed-templates.txt']

  back-docs-not-blocking:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: bundle exec rake web_api:docs:generate
      - run: bundle exec rake public_api:docs:generate
      - run: bundle exec rake admin_api:docs:generate
      - run: apt-get update && apt-get -y install awscli
      - run: aws s3 sync doc/api s3://developers.citizenlab.co/api-docs/ee/frontweb_api/$CIRCLE_BRANCH --delete --acl public-read
      - run: aws s3 sync doc/public_api s3://developers.citizenlab.co/api-docs/ee/public_api/$CIRCLE_BRANCH --delete --acl public-read
      - run: aws s3 sync doc/admin_api s3://developers.citizenlab.co/api-docs/ee/admin_api/$CIRCLE_BRANCH --delete --acl public-read

  back-trigger-deploy:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - echo_pipeline_parameters
      - run: |
          curl --request POST \
            -u $CIRCLECI_API_TOKEN: \
            --url https://circleci.com/api/v2/project/github/CitizenLabDotCo/citizenlab/pipeline \
            --header 'content-type: application/json' \
            --header 'x-attribution-login: '"$CIRCLE_USERNAME" \
            --data '{"branch": "'"$CIRCLE_BRANCH"'","parameters": {"image_tag": "'"$CIRCLE_SHA1"'", "run_deploy": true, "back": true, "trigger": false}}'

  back-push-deployment-docker-image:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    parameters:
      image_tag:
        type: string
        default: << pipeline.parameters.image_tag >>
    steps:
      - echo_pipeline_parameters
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker pull citizenlabdotco/back-ee:<< parameters.image_tag >>
      - run: docker tag citizenlabdotco/back-ee:<< parameters.image_tag >> citizenlabdotco/back-ee:$CIRCLE_BRANCH
      - deploy:
          command: docker push citizenlabdotco/back-ee:$CIRCLE_BRANCH

  back-deploy-to-swarm:
    resource_class: small
    docker:
      - image: buildo/alpine-ssh
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      stack_name:
        type: string
        default: cl2-back
      compose_file:
        type: string
        default: docker-compose-production.yml
      env_file:
        type: string
        default: .env-production
    steps:
      - run:
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker pull citizenlabdotco/back-ee:$CIRCLE_BRANCH && docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake db:migrate cl2back:clean_tenant_settings email_campaigns:assure_campaign_records fix_existing_tenants:update_permissions cl2back:clear_cache_store email_campaigns:remove_deprecated"
      - deploy:
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "cd cl2-deployment && docker stack deploy --compose-file << parameters.compose_file >> << parameters.stack_name >> --with-registry-auth"

  back-generate-tenant-templates:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      env_file:
        type: string
        default: .env-production-benelux
    steps:
      - run: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake templates:generate[true]"

  check-for-inconsistent-data:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      env_file:
        type: string
        default: .env-production
    steps:
      - run:
          name: Check for inconsistent data
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake checks:invalid_data"
          no_output_timeout: 60m

  front-detect-deadcode:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run detect-deadcode

  front-lint:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run lint

  front-license-check:
    docker:
      - image: licensefinder/license_finder
    working_directory: ~/citizenlab/front
    resource_class: small
    steps:
      - shallow-clone
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - run: /bin/bash -lc "cd ~/citizenlab/front && license_finder"

  front-build:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: large
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: TEST_BUILD="true" npm run build
          no_output_timeout: "30m"

  front-extract-intl:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run extract-intl
      - run: git add app/translations/*.json
      - run: git add app/translations/admin/*.json
      - run: git config --global user.email "hello@citizenlab.co"
      - run: git config --global user.name "CircleCI"
      - add_ssh_keys:
          fingerprints:
            - "b8:7b:38:ee:7d:8c:8c:e0:84:74:88:b6:98:2d:0f:f6"
      - run: git diff --quiet app/translations && git diff --staged --quiet app/translations || git commit -m "Translations updated by CI (extract-intl)"
      - run: git push origin $CIRCLE_BRANCH

  # FRONT-END
  front-test:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    # If you modify the resource_class, ensure that you also adjust the number of
    # workers utilized by `npm run test:ci` (in package.json) to correspond with the
    # number of vCPUs available for this instance class.
    #
    # Note: when running tests in parallel with Jest, the number of workers must
    # be specified explicitly. Otherwise, Jest attempts to use all available resources
    # of the machine instead of restricting itself to the test virtual environment.
    # See:
    # - https://circleci.com/docs/collect-test-data/#jest
    # - https://github.com/facebook/jest/issues/1524#issuecomment-262366820
    # - https://github.com/facebook/jest/issues/5239#issuecomment-355867359
    resource_class: medium+
    working_directory: ~/
    environment:
      CITIZENLAB_EE: true
    parallelism: 4
    steps:
      - shallow-clone
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: cd citizenlab/front && npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd citizenlab/front
            TEST_FILES=$(circleci tests glob '**/*.test.{ts,tsx}' | circleci tests split --split-by=timings)
            echo $TEST_FILES
            npm run test:ci -- $TEST_FILES
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/
      - store_test_results:
          path: ./citizenlab/front/reports/
      - store_artifacts:
          path: ./citizenlab/front/reports/

  front-trigger-deploy:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - echo_pipeline_parameters
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, master]
              - equal: [<< pipeline.git.branch >>, production]
          steps:
            - run: |
                curl --request POST \
                  -u $CIRCLECI_API_TOKEN: \
                  --url https://circleci.com/api/v2/project/github/CitizenLabDotCo/citizenlab/pipeline \
                  --header 'content-type: application/json' \
                  --header 'x-attribution-login: '"$CIRCLE_USERNAME" \
                  --data '{"branch": "'"$CIRCLE_BRANCH"'","parameters": {"run_deploy": true, "front": true, "trigger": false}}'

  front-deploy-staging:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: large
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN SENTRY_DSN=$SENTRY_DSN SENTRY_ENV=$SENTRY_ENV_STAGING POSTHOG_API_KEY=$POSTHOG_API_KEY_STAGING npm run build
          no_output_timeout: "30m"
      - run:
          command: rm build/*.map
      - deploy:
          name: Deploy to S3 if tests pass and branch is Master
          command: |
            aws s3 sync build/ s3://cl2-front-staging/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-staging/index.html --acl public-read --cache-control no-cache

  front-deploy-production:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: large
    working_directory: ~/citizenlab/front
    steps:
      - shallow-clone
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_PRODUCTION SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN SENTRY_DSN=$SENTRY_DSN POSTHOG_API_KEY=$POSTHOG_API_KEY_PRODUCTION npm run build
          no_output_timeout: "30m"
      - run:
          command: rm build/*.map
      - deploy:
          name: Deploy production version
          command: |
            aws s3 sync build/ s3://cl2-front-production-benelux/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-production-benelux/index.html --acl public-read --cache-control no-cache
      - deploy:
          name: Invalidate the static assets on the CDN
          command: aws cloudfront create-invalidation --distribution-id E2MY732QC516J3 --paths '/*'

  front-test-lighthouse:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
        user: pptruser
    resource_class: small
    working_directory: ~/citizenlab/front
    steps:
      - run:
          command: npm install lighthouse-ci@1.13.1
      - run:
          command: npx lighthouse-ci@1.13.1 https://demo.stg.citizenlab.co --performance=3 --report=/tmp
      - store_artifacts:
          path: /tmp/report.html
          destination: lighthouse

  # E2E TESTS
  e2e-tests:
    docker:
      - image: cimg/base:2021.03
    parallelism: 3
    resource_class: medium+
    steps:
      - shallow-clone
      - copy_secrets_from_lastpass
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: |
          cd e2e
          # --parallel is weird https://github.com/docker/compose/issues/7901 but it seems to work.
          # `docker compose` (w/o hythen) doesn't work atm "docker: 'compose' is not a docker command"
          docker-compose build --parallel
      - run: |
          cd e2e
          docker-compose run web bin/rails db:drop db:create db:schema:load
          docker-compose run web bin/rails "cl2_back:create_tenant[e2e.front,e2etests_template]"
      - run:
          command: |
            cd e2e
            docker-compose up
          background: true
      # Wait until build is finished.
      - run: |
          sleep 10 # if we run `docker-compose run` immediately, it fails with "network is ambiguous (2 matches found on name)"
          cd e2e
          # we cannot access localhost:3000, so we call it from the container
          # https://discuss.circleci.com/t/cannot-communicate-with-docker-container/27253/2
          docker-compose run front curl --retry 2 --retry-delay 5 --retry-connrefused -v http://e2e.front:3000
      - run: |
          cd front
          TESTFILES=$(circleci tests glob "cypress/e2e/**/*.cy.ts" | circleci tests split  --split-by=timings)
          COMMA_SEPARATED_TESTFILES=$(echo $TESTFILES | sed 's/ /,/g')
          echo $COMMA_SEPARATED_TESTFILES
          cd ../e2e
          docker-compose run --name cypress_run front npm run cypress:run -- --reporter junit --reporter-options "mochaFile=reports/cypress.xml,toConsole=true" --config baseUrl=http://e2e.front:3000 --spec ${COMMA_SEPARATED_TESTFILES}
      # We run cypress tests in container, so we need to copy the results out.
      # ToDo: fix it. Reporting doesn't work atm.
      - run: |
          mkdir -p front/reports
          docker cp cypress_run:/front/reports/cypress.xml front/reports/cypress.xml
      - run:
          command: docker cp cypress_run:/front/cypress/screenshots .
          # If `when: always`, it fails on success with
          # Error: No such container:path: cypress_run:/front/cypress/screenshots
          when: on_fail
      - store_test_results:
          path: front/reports
      - store_artifacts:
          path: screenshots

workflows:
  version: 2

  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/

  global-checks:
    when: << pipeline.parameters.trigger >>
    jobs:
      - danger-check:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production
      - changelogger:
          filters:
            branches:
              only:
                - production
          context:
            - docker-hub-access
            - changelogger

  # BACK-END
  back:
    when:
      and:
        - << pipeline.parameters.back >>
        - not: <<pipeline.parameters.run_deploy>>
        - not:
            equal: ["production", << pipeline.git.branch >>]
    jobs:
      - back-build-docker-image:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
          context:
            - docker-hub-access
            - citizenlab-ee-environment
      - back-lint:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
          requires:
            - back-build-docker-image
      - back-bundle-audit:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
          requires:
            - back-build-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-license-check:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
          requires:
            - back-build-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-test:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
          requires:
            - back-build-docker-image
      - back-docs-not-blocking:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
          requires:
            - back-build-docker-image
      - back-trigger-deploy:
          context: circleci-api-token
          requires:
            - back-test
            - back-lint
            - back-bundle-audit
          filters:
            branches:
              only:
                - master

  back-deploy-staging:
    when:
      and:
        - <<pipeline.parameters.run_deploy>>
        - << pipeline.parameters.back >>
    jobs:
      - back-push-deployment-docker-image:
          context: docker-hub-access
          filters:
            branches:
              only:
                - master
      - back-deploy-to-swarm:
          name: Deploy to staging
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - master
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_STAGING
          compose_file: docker-compose-staging.yml
          stack_name: cl2-back-stg
          env_file: ".env-staging"

  back-deploy-production:
    when: << pipeline.parameters.back >>
    jobs:
      - back-build-docker-image:
          filters:
            branches:
              only: production
          context:
            - docker-hub-access
            - citizenlab-ee-environment
      - back-push-deployment-docker-image:
          context: docker-hub-access
          filters:
            branches:
              only:
                - production
          image_tag: $CIRCLE_SHA1
          requires:
            - back-build-docker-image
      - back-deploy-to-swarm:
          name: Deploy to Europe
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_EUROPE
          compose_file: docker-compose-production-benelux.yml
          stack_name: cl2-prd-bnlx-stack
          env_file: ".env-production-benelux"
      - back-deploy-to-swarm:
          name: Deploy to Canada
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_CAN
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
      - back-deploy-to-swarm:
          name: Deploy to South-America
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_SAM
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
      - back-deploy-to-swarm:
          name: Deploy to US-West
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_USW
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
      - back-deploy-to-swarm:
          name: Deploy to UK
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_UK
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"

  # FRONT-END
  front:
    when:
      and:
        - << pipeline.parameters.front >>
        - not: <<pipeline.parameters.run_deploy>>
        - not:
            equal: ["production", << pipeline.git.branch >>]
    jobs:
      - front-test
      - front-lint:
          context: citizenlab-ee-environment
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - front-detect-deadcode:
          context: citizenlab-ee-environment
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - front-license-check:
          context: citizenlab-ee-environment
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - front-build:
          context: citizenlab-ee-environment
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - front-extract-intl:
          context: citizenlab-ee-environment
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
      - front-trigger-deploy:
          context: circleci-api-token
          requires:
            - front-test
            - front-build
            - front-license-check
          filters:
            branches:
              only:
                - master

  front-deploy-staging:
    when:
      and:
        - <<pipeline.parameters.run_deploy>>
        - <<pipeline.parameters.front>>
    jobs:
      - front-deploy-staging:
          filters:
            branches:
              only: master
          context:
            - citizenlab-ee-environment
      - front-test-lighthouse:
          requires:
            - front-deploy-staging
          filters:
            branches:
              only: master

  front-deploy-production:
    when: <<pipeline.parameters.front>>
    jobs:
      - front-deploy-production:
          filters:
            branches:
              only:
                - production
          context:
            - citizenlab-ee-environment

  # OTHER
  manually-e2e-tests:
    when: << pipeline.parameters.e2e >>
    jobs:
      - e2e-tests:
          context:
            - docker-hub-access
            - lastpass

  nightly-e2e-tests:
    triggers:
      - schedule:
          cron: "0 2,14 * * 1-5" # https://crontab.guru/
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e-tests:
          context:
            - docker-hub-access
            - slack-dev-notifications-e2e
            - lastpass
          post-steps:
            - slack/notify:
                event: pass
                template: basic_success_1
            - slack/notify:
                event: fail
                mentions: ":boom: FAILURE: Some tests failed."
                template: basic_fail_1

  manual-templates:
    when: << pipeline.parameters.templates >>
    jobs:
      - back-build-docker-image:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
      - back-generate-tenant-templates:
          name: "Europe (mainland)"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_EUROPE
          env_file: ".env-production-benelux"
      - back-generate-tenant-templates:
          name: "South America"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_SAM
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "Canada"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_CAN
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "US West"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_USW
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "UK"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_UK
          env_file: ".env-web"
      - back-test-tenant-templates:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          requires:
            - back-build-docker-image
            - "Europe (mainland)"
            - "South America"
            - "Canada"
            - "US West"
            - "UK"
      - back-release-tenant-templates:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          requires:
            - back-test-tenant-templates
          post-steps:
            - slack/notify:
                event: pass
                template: basic_success_1
            - slack/notify:
                event: fail
                mentions: ":boom: FAILURE: Some templates are invalid and could not be released."
                template: basic_fail_1

  nightly-templates:
    # Todo: scheduled workflows are deprecated, should be converted into a scheduled pipeline
    # https://circleci.com/docs/migrate-scheduled-workflows-to-scheduled-pipelines/
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - production
    jobs:
      - back-build-docker-image:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
      - back-generate-tenant-templates:
          name: "Europe (mainland)"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_EUROPE
          env_file: ".env-production-benelux"
      - back-generate-tenant-templates:
          name: "South America"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_SAM
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "Canada"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_CAN
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "US West"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_USW
          env_file: ".env-web"
      - back-generate-tenant-templates:
          name: "UK"
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_UK
          env_file: ".env-web"
      - back-test-tenant-templates:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          requires:
            - back-build-docker-image
            - "Europe (mainland)"
            - "South America"
            - "Canada"
            - "US West"
            - "UK"
      - back-release-tenant-templates:
          context:
            - docker-hub-access
            - citizenlab-ee-environment
            - slack-dev-notifications-tenant-templates
          requires:
            - back-test-tenant-templates
          post-steps:
            - slack/notify:
                event: pass
                template: basic_success_1
            - slack/notify:
                event: fail
                mentions: ":boom: FAILURE: Some templates are invalid and could not be released."
                template: basic_fail_1

  check-for-inconsistent-data:
    triggers:
      - schedule:
          cron: "0 2 * * 1"
          filters:
            branches:
              only:
                - production
    jobs:
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: "South America"
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_SAM
          env_file: ".env-web"
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: "Canada"
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_CAN
          env_file: ".env-web"
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: "US West"
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_USW
          env_file: ".env-web"
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: "UK"
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: $CITIZENLAB_CLUSTER_IP_ADDRESS_UK
          env_file: ".env-web"
      - slack-invalid-data-success:
          name: ":tada: SUCCESS: No invalid data was detected!" # Mentions are not supported for basic_success_1
          context:
            - slack-dev-notifications-inconsistent-data
          requires:
            - "South America"
            - "Canada"
            - "US West"
            - "UK"
