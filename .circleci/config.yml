version: 2.1

orbs:
  slack: circleci/slack@4.3.3

slack-fail-post-step-templates: &slack-fail-post-step-templates
  post-steps:
    - slack/notify:
        event: fail
        mentions: ':boom: FAILURE: Tenant templates workflow failed to release new template versions.'
        template: basic_fail_1

slack-fail-post-step-inconsistent-data: &slack-fail-post-step-inconsistent-data
  post-steps:
    - slack/notify:
        event: fail
        mentions: ':boom: FAILURE: Some data is likely invalid.'
        template: basic_fail_1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  back: # corresponds to the name of the package
    type: boolean
    default: false

  front: # corresponds to the name of the package
    type: boolean
    default: false

  e2e:
    type: boolean
    default: false

  templates:
    type: boolean
    default: false

executors:
  back-essential:
    parameters:
      image-tag:
        type: string
    docker:
      - image: citizenlabdotco/back-essential:<< parameters.image-tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
      - image: "postgis/postgis:12-3.1"
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

commands:
  enable_ee:
    steps:
      # TODO: Does this even do anything in terms of setting env vars? I think the .env-back file is only picked up via docker-compose file
      - run: "sh scripts/enable_ee.sh"
      - run: "bundle install"
  wait-for-postgres:
    steps:
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

jobs:
  trigger-workflows:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh

  danger-check:
    resource_class: small
    docker:
      - image: ghcr.io/danger/danger-js:10.6.6
    steps:
      - checkout
      - run: danger ci

  # *************** back ***************

  back-build-essential-docker-image:
    working_directory: /citizenlab
    docker:
      - image: docker:stable-git
    steps:
      - checkout:
          path: /citizenlab

      - setup_remote_docker:
          docker_layer_caching: true

      - run: |
          docker build -t citizenlabdotco/back-essential:$CIRCLE_SHA1 -f back/Dockerfile .
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push citizenlabdotco/back-essential:$CIRCLE_SHA1

  back-lint:
    resource_class: medium
    executor:
      name: back-essential
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: development
    steps:
      - run: bundle exec rubocop -P --format simple

  back-bundle-audit:
    resource_class: small
    executor:
      name: back-essential
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: development
    steps:
      # CVE-2015-9284 is "CSRF vulnerability in OmniAuth's request phase"
      # Solution: upgrade to '>= 2.0.0'
      # But we can't, due to unmaintained gems that don't work with Omniauth 2.0.
      # See https://github.com/rubysec/bundler-audit
      - run: bundle exec bundle-audit check --update --ignore CVE-2015-9284

  back-test-os:
    resource_class: small
    executor:
      name: back-essential
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 4
    environment:
      RAILS_ENV: test
      COVERAGE: ON
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/free/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --profile --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports

  back-test-ee:
    resource_class: small
    executor:
      name: back-essential
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 4
    environment:
      RAILS_ENV: test
      COVERAGE: ON
      CITIZENLAB_EE: true
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/*/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --profile --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports

  back-license-check:
    resource_class: small
    executor:
      name: back-essential
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    steps:
      - run: bundle exec license_finder

  back-web-api-docs:
    resource_class: small
    executor:
      name: back-essential
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: bundle exec rake web_api:docs:generate
      - run: apt-get -y install awscli
      - run: aws s3 sync doc/api s3://developers.citizenlab.co/api-docs/essential/frontweb_api/$CIRCLE_BRANCH --delete --acl public-read

  back-release-essential-image:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker pull citizenlabdotco/back-essential:$CIRCLE_SHA1
      - run: docker tag citizenlabdotco/back-essential:$CIRCLE_SHA1 citizenlabdotco/back-essential
      - deploy:
          command: docker push citizenlabdotco/back-essential

  # *************** front ***************

  front-test:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: /citizenlab/front
    steps:
      - checkout:
          path: /citizenlab
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          name: Run tests with JUnit as reporter
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
          command: npm run test:ci
      - store_test_results:
          path: ./reports/junit
      - store_artifacts:
          path: ./reports/junit

  front-detect-deadcode:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: /citizenlab/front
    steps:
      - checkout:
          path: /citizenlab
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run detect-deadcode


  front-lint:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: /citizenlab/front
    steps:
      - checkout:
          path: /citizenlab
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run lint

  front-license-check:
    docker:
      - image: licensefinder/license_finder
    working_directory: /citizenlab/front
    resource_class: small
    steps:
      - checkout:
          path: /citizenlab
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - run: /bin/bash -lc "cd /citizenlab/front && license_finder"

  front-build:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: large
    working_directory: /citizenlab/front
    steps:
      - checkout:
          path: /citizenlab
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: TEST_BUILD="true" npm run build
          no_output_timeout: "30m"

  front-extract-intl:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: /citizenlab/front
    steps:
      - checkout:
          path: /citizenlab
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-npm-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run extract-intl
      - run: git add app/translations/*.json
      - run: git add app/translations/admin/*.json
      - run: git config --global user.email "hello@citizenlab.co"
      - run: git config --global user.name "CircleCI"
      - add_ssh_keys:
          fingerprints:
            - "58:ea:55:fb:4f:97:df:77:2f:aa:02:54:ae:57:4d:d2"
      - run: git diff --quiet app/translations && git diff --staged --quiet app/translations || git commit -m "Translations updated by CI (extract-intl)"
      - run: git push origin $CIRCLE_BRANCH

  front-release-essential-image:
    docker:
      - image: cimg/base:2021.03
    steps:
      - checkout
      - setup_remote_docker:
          # https://support.circleci.com/hc/en-us/articles/360050934711
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: |
          docker build -t citizenlabdotco/front-essential -f front/Dockerfile .
      - deploy:
          command: docker push citizenlabdotco/front-essential

workflows:
  version: 2

  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/

  global-checks:
    when: << pipeline.parameters.trigger >>
    jobs:
      - danger-check:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production

  # *************** back ***************
  back:
    when: << pipeline.parameters.back >>
    jobs:
      - back-build-essential-docker-image:
          context: docker-hub-access
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-lint:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-bundle-audit:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-test-os:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-test-ee:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-license-check:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - back-web-api-docs:
          context: docker-hub-access
          requires:
            - back-test
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
  # *************** front ***************
  front:
    when: << pipeline.parameters.front >>
    jobs:
      - front-test:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
      - front-lint:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
      - front-detect-deadcode:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
      - front-license-check:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - front-build:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
      - front-extract-intl:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production


  # *************** release ***************

  release:
    when: << pipeline.parameters.trigger >>
    jobs:
      - front-test:
          filters:
            branches:
              only:
                - production
      - front-detect-deadcode:
          filters:
            branches:
              only:
                - production
      - front-lint:
          filters:
            branches:
              only:
                - production
      - front-license-check:
          filters:
            branches:
              only:
                - production
      - front-build:
          filters:
            branches:
              only:
                - production
      - back-build-essential-docker-image:
          context: docker-hub-access
          filters:
            branches:
              only:
                - production
      - back-lint:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              only:
                - production
      - back-bundle-audit:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              only:
                - production
      - back-test:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              only:
                - production
      - back-license-check:
          context: docker-hub-access
          requires:
            - back-build-essential-docker-image
          filters:
            branches:
              only:
                - production
      - front-release-essential-image:
          context: docker-hub-access
          requires:
            - front-test
            - front-license-check
            - front-build
            - front-detect-deadcode
            - front-lint
            - back-lint
            - back-test
            - back-bundle-audit
            - back-license-check
          filters:
            branches:
              only:
                - production
      - back-release-essential-image:
          context: docker-hub-access
          requires:
            - front-test
            - front-license-check
            - front-build
            - front-detect-deadcode
            - front-lint
            - back-lint
            - back-test
            - back-bundle-audit
            - back-license-check
          filters:
            branches:
              only:
                - production
