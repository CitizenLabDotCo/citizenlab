version: 2.1

orbs:
  cypress: cypress-io/cypress@1.27.0
  slack: circleci/slack@4.3.3

slack-fail-post-step-templates: &slack-fail-post-step-templates
  post-steps:
    - slack/notify:
        event: fail
        mentions: ':boom: FAILURE: Tenant templates workflow failed to release new template versions.'
        template: basic_fail_1

slack-fail-post-step-inconsistent-data: &slack-fail-post-step-inconsistent-data
  post-steps:
    - slack/notify:
        event: fail
        mentions: ':boom: FAILURE: Some data is likely invalid.'
        template: basic_fail_1

parameters:

  back:
    type: boolean
    default: false

  front:
    type: boolean
    default: false

  citizenlab_branch:
    type: string
    default: master

  citizenlab_sha:
    type: string
    default: "unknown"

  run_deploy:
    type: boolean
    default: false

  image_tag:
    type: string
    default: ""

executors:
  cl2-back:
    parameters:
      image-tag:
        type: string
    docker:
      - image: citizenlabdotco/back-ee:<< parameters.image-tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
      - image: 'postgis/postgis:12-3.1'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

commands:
  wait-for-postgres:
    steps:
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

  echo_pipeline_parameters:
    steps:
      - run: |
          echo "back: << pipeline.parameters.back >>"
          echo "front: << pipeline.parameters.front >>"
          echo "citizenlab_branch: << pipeline.parameters.citizenlab_branch >>"
          echo "citizenlab_sha: << pipeline.parameters.citizenlab_sha >>"
          echo "run_deploy: << pipeline.parameters.run_deploy >>"
          echo "image_tag: << pipeline.parameters.image_tag >>"

  clone_citizenlab_and_enable_ee:
    steps:
      - checkout:
          path: ~/citizenlab-ee

      - add_ssh_keys:
          fingerprints:
            - "94:9a:7c:8d:50:73:cc:28:06:47:d7:98:91:0b:00:ff"
      - run: |
          git clone git@github.com:CitizenLabDotCo/citizenlab --depth 5 --branch << pipeline.parameters.citizenlab_branch >> ~/citizenlab

      - run: |
          cd citizenlab-ee && sh scripts/enable_ee.sh

  pending_citizenlab_github_status:
    steps:
      - run:
          name: Set github status to pending
          command: |
            curl \
              -u "$GITHUB_USER":"$GITHUB_TOKEN" \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/citizenlabdotco/citizenlab/statuses/<< pipeline.parameters.citizenlab_sha >> \
              -d '{"state": "pending", "description": "Pending","context": "ci/circleci: EE '"$CIRCLE_JOB"'","target_url": "'"$CIRCLE_BUILD_URL"'"}'

  final_citizenlab_github_status:
    steps:
      - run:
          name: Set github status to failure
          when: on_fail
          command: |
            curl \
              -u "$GITHUB_USER":"$GITHUB_TOKEN" \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/citizenlabdotco/citizenlab/statuses/<< pipeline.parameters.citizenlab_sha >> \
              -d '{"state": "failure","description": "Failed","context": "ci/circleci: EE '"$CIRCLE_JOB"'","target_url": "'"$CIRCLE_BUILD_URL"'"}'
      - run:
          name: Set github status to success
          when: on_success
          command: |
            curl \
              -u "$GITHUB_USER":"$GITHUB_TOKEN" \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/citizenlabdotco/citizenlab/statuses/<< pipeline.parameters.citizenlab_sha >> \
              -d '{"state": "success","description": "Success","context": "ci/circleci: EE '"$CIRCLE_JOB"'","target_url": "'"$CIRCLE_BUILD_URL"'"}'

jobs:
  slack-invalid-data-success:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  # *************** back ***************

  back-build-ee-docker-image:
    working_directory: ~/
    docker:
      - image: cimg/base:2021.03
    steps:
      - pending_citizenlab_github_status
      - echo_pipeline_parameters
      - clone_citizenlab_and_enable_ee
      - setup_remote_docker:
          docker_layer_caching: true

      - run: |
          docker build -t citizenlabdotco/back-ee:<< pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1 -f citizenlab/back/Dockerfile citizenlab/.
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push citizenlabdotco/back-ee:<< pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
      - final_citizenlab_github_status

  back-test:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 4
    environment:
      RAILS_ENV: test
      CITIZENLAB_EE: true
    steps:
      - pending_citizenlab_github_status
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/*/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports
      - final_citizenlab_github_status

  back-slow-tests:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
      CITIZENLAB_EE: true
    steps:
      - pending_citizenlab_github_status
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          bundle exec rspec --format documentation --format RspecJunitFormatter -o spec/reports/rspec.xml -t slow_test -P "spec/**/*_spec.rb,engines/*/*/spec/**/*_spec.rb"
      - store_test_results:
          path: spec/reports
      - final_citizenlab_github_status

  back-test-tenant-templates:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
      CITIZENLAB_EE: true
    steps:
      - run: mkdir -p workspace
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: SPEC_OPTS="-t template_test -P "spec/**/*_spec.rb"" bundle exec rspec
      - run: SPEC_OPTS="-t template_test -P "engines/*/*/spec/**/*_spec.rb"" bundle exec rspec
      - run:
          command: rake templates:verify['workspace/failed-templates.txt']
          no_output_timeout: 60m
      - persist_to_workspace:
          root: workspace
          paths:
            - failed-templates.txt

  back-release-tenant-templates:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      CITIZENLAB_EE: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: rake templates:release['/tmp/workspace/failed-templates.txt']

  back-web-api-docs:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: << pipeline.parameters.citizenlab_sha >>-$CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
      CITIZENLAB_EE: true
    steps:
      - wait-for-postgres
      - run: |
          rake db:create
          rake db:schema:load
      - run: bundle exec rake web_api:docs:generate
      - run: bundle exec rake public_api:docs:generate
      - run: bundle exec rake admin_api:docs:generate
      - run: apt-get -y install awscli
      - run: aws s3 sync doc/api s3://developers.citizenlab.co/api-docs/ee/frontweb_api/<< pipeline.parameters.citizenlab_branch >> --delete --acl public-read
      - run: aws s3 sync doc/public_api s3://developers.citizenlab.co/api-docs/ee/public_api/<< pipeline.parameters.citizenlab_branch >> --delete --acl public-read
      - run: aws s3 sync doc/admin_api s3://developers.citizenlab.co/api-docs/ee/admin_api/<< pipeline.parameters.citizenlab_branch >> --delete --acl public-read

  back-trigger-deploy:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - when:
          condition:
            or:
              - equal: [<< pipeline.parameters.citizenlab_branch >>, master]
              - equal: [<< pipeline.parameters.citizenlab_branch >>, production]
          steps:
            - run: |
                curl --request POST \
                  -u $CIRCLECI_API_TOKEN: \
                  --url https://circleci.com/api/v2/project/github/CitizenLabDotCo/citizenlab-ee/pipeline \
                  --header 'content-type: application/json' \
                  --header 'x-attribution-login: '"$CIRCLE_USERNAME" \
                  --data '{"branch": "'"$CIRCLE_BRANCH"'","parameters": {"image_tag": "<< pipeline.parameters.citizenlab_sha >>-'"$CIRCLE_SHA1"'", "run_deploy": true, "back": true}}'
      - echo_pipeline_parameters

  back-push-deployment-docker-image:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - echo_pipeline_parameters
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker pull citizenlabdotco/back-ee:<< pipeline.parameters.image_tag >>
      - run: docker tag citizenlabdotco/back-ee:<< pipeline.parameters.image_tag >> citizenlabdotco/back-ee:$CIRCLE_BRANCH
      - deploy:
          command: docker push citizenlabdotco/back-ee:$CIRCLE_BRANCH

  back-deploy-to-swarm:
    resource_class: small
    docker:
      - image: buildo/alpine-ssh
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      stack_name:
        type: string
        default: cl2-back
      compose_file:
        type: string
        default: docker-compose-production.yml
      env_file:
        type: string
        default: .env-production
    steps:
      - run:
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker pull citizenlabdotco/back-ee:$CIRCLE_BRANCH && docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake db:migrate cl2back:clean_tenant_settings email_campaigns:assure_campaign_records fix_existing_tenants:update_permissions cl2back:clear_cache_store email_campaigns:remove_deprecated"
      - deploy:
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "cd cl2-deployment && docker stack deploy --compose-file << parameters.compose_file >> << parameters.stack_name >> --with-registry-auth"

  back-generate-tenant-templates:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      env_file:
        type: string
        default: .env-production-benelux
    steps:
      - run: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake templates:generate[true]"

  check-for-inconsistent-data:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      env_file:
        type: string
        default: .env-production
    steps:
      - run:
          name: Check for inconsistent data
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> -o StrictHostKeyChecking=no "docker run --env-file cl2-deployment/<< parameters.env_file >> citizenlabdotco/back-ee:$CIRCLE_BRANCH rake checks:invalid_data"
          no_output_timeout: 60m

  # *************** front ***************
  front-test:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/
    steps:
      - pending_citizenlab_github_status
      - clone_citizenlab_and_enable_ee
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: cd citizenlab/front && npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
      - run:
          name: Run tests with JUnit as reporter
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
          command: cd citizenlab/front && npm run test:ci
      - store_test_results:
          path: ./reports/junit
      - store_artifacts:
          path: ./reports/junit
      - final_citizenlab_github_status

  front-trigger-deploy:
    resource_class: small
    docker:
      - image: cimg/base:2021.03
    steps:
      - when:
          condition:
            or:
              - equal: [<< pipeline.parameters.citizenlab_branch >>, master]
              - equal: [<< pipeline.parameters.citizenlab_branch >>, production]
          steps:
            - run: |
                curl --request POST \
                  -u $CIRCLECI_API_TOKEN: \
                  --url https://circleci.com/api/v2/project/github/CitizenLabDotCo/citizenlab-ee/pipeline \
                  --header 'content-type: application/json' \
                  --header 'x-attribution-login: '"$CIRCLE_USERNAME" \
                  --data '{"branch": "'"$CIRCLE_BRANCH"'","parameters": {"citizenlab_branch": "<< pipeline.parameters.citizenlab_branch >>", "run_deploy": true, "front": true}}'
      - echo_pipeline_parameters

  front-deploy-staging:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/
    steps:
      - clone_citizenlab_and_enable_ee
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: cd citizenlab/front && npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
      - run:
          command: cd citizenlab/front && SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING SENTRY_DSN=$SENTRY_DSN_STAGING npm run build:staging
          no_output_timeout: '30m'
      - run:
          command: cd citizenlab/front && rm build/*.map
      - deploy:
          name: Deploy to S3 if tests pass and branch is Master
          command: |
            cd ~/citizenlab/front
            aws s3 sync build/ s3://cl2-front-staging/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-staging/index.html --acl public-read --cache-control no-cache

  front-deploy-production:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/
    steps:
      - clone_citizenlab_and_enable_ee
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: cd citizenlab/front && npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "citizenlab/front/package.json" }}
      - run:
          command: cd citizenlab/front && SEGMENT_API_KEY=$SEGMENT_API_KEY_PRODUCTION SENTRY_DSN=$SENTRY_DSN_PRODUCTION npm run build:staging
          no_output_timeout: '30m'
      - run:
          command: cd citizenlab/front && rm build/*.map
      - deploy :
          name: Deploy production version
          command: |
            aws s3 sync build/ s3://cl2-front-production-benelux/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-production-benelux/index.html --acl public-read --cache-control no-cache
      - deploy:
          name: Invalidate the static assets on the CDN
          command: aws cloudfront create-invalidation --distribution-id E2MY732QC516J3 --paths '/*'

  front-reset-ci-tenant:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: small
    steps:
      - add_ssh_keys:
          fingerprints:
            - "50:78:bd:26:fb:8c:2d:96:38:ac:57:d2:08:46:96:da"
      - run: ssh -o StrictHostKeyChecking=no -l ubuntu 52.29.30.188 "docker run --env-file cl2-deployment/.env-staging --rm citizenlabdotco/back-ee:master bundle exec rake cl2_back:create_tenant['e2e.stg.citizenlab.co','e2etests_template']"

  front-test-lighthouse:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
        user: pptruser
    resource_class: small
    working_directory: ~/citizenlab/front
    steps:
      - run:
          command: npm install lighthouse-ci@1.10.0
      - run:
          command: npx lighthouse-ci@1.10.0 https://demo.stg.citizenlab.co --performance=3 --report=/tmp
      - store_artifacts:
          path: /tmp/report.html
          destination: lighthouse

workflows:
  version: 2

  back:
    when:
      and:
        - not: <<pipeline.parameters.run_deploy>>
        - << pipeline.parameters.back >>
    jobs:
      - back-build-ee-docker-image:
          context: docker-hub-access
      - back-test:
          context: docker-hub-access
          requires:
            - back-build-ee-docker-image
      - back-web-api-docs:
          context: docker-hub-access
          requires:
            - back-test
      - back-slow-tests:
          context: docker-hub-access
          requires:
            - back-build-ee-docker-image
          filters:
            branches:
              only:
                - master
                - production
      - back-trigger-deploy:
          context: circleci-api-token
          requires:
            - back-test
            - back-slow-tests
          filters:
            branches:
              only:
                - master
                - production

  back-deploy:
    when:
      and:
        - <<pipeline.parameters.run_deploy>>
        - << pipeline.parameters.back >>
    jobs:
      - back-push-deployment-docker-image:
          context: docker-hub-access
          filters:
            branches:
              only:
                - master
                - production
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - master
          ssh_host: "52.29.30.188"
          compose_file: docker-compose-staging.yml
          stack_name: cl2-back-stg
          env_file: ".env-staging"
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: "52.57.74.84"
          compose_file: docker-compose-production-benelux.yml
          stack_name: cl2-prd-bnlx-stack
          env_file: ".env-production-benelux"
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: "35.183.23.116"
          compose_file: docker-compose-production-canada.yml
          env_file: ".env-production-canada"
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: "52.67.181.38"
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: "52.13.59.174"
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
      - back-deploy-to-swarm:
          requires:
            - back-push-deployment-docker-image
          filters:
            branches:
              only:
                - production
          ssh_host: "35.179.69.215"
          compose_file: docker-compose-production.yml
          env_file: ".env-web"
          stack_name: "cl2"
  front:
    when:
      and:
        - not: <<pipeline.parameters.run_deploy>>
        - << pipeline.parameters.front >>
    jobs:
      - front-test
      - front-trigger-deploy:
          context: circleci-api-token
          requires:
            - front-test
          filters:
            branches:
              only:
                - master
                - production
  front-deploy:
    when:
      and:
        - <<pipeline.parameters.run_deploy>>
        - <<pipeline.parameters.front>>
    jobs:
      - front-deploy-staging:
          filters:
            branches:
              only:
                - master
      - front-deploy-production:
          filters:
            branches:
              only:
                - production
      - front-reset-ci-tenant:
          filters:
            branches:
              only:
                - master
      - cypress/run:
          requires:
            - front-deploy-staging
            - front-reset-ci-tenant
          post-checkout:
            - add_ssh_keys:
                fingerprints: ["94:9a:7c:8d:50:73:cc:28:06:47:d7:98:91:0b:00:ff"]
            - run: git clone git@github.com:CitizenLabDotCo/citizenlab --depth 5 --branch master ~/citizenlab
            - run: sh scripts/enable_ee.sh
          working_directory: ~/citizenlab/front
          cache-key: v1-npm-cache-{{ checksum "~/citizenlab/front/package.json" }}
          command: npx cypress run --spec 'cypress/integration/*.ts' --config baseUrl=https://e2e.stg.citizenlab.co
          store_artifacts: true
          filters:
            branches:
              only:
                - master
      - front-test-lighthouse:
          requires:
            - front-deploy-staging
          filters:
            branches:
              only: master
  nightly-templates:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - production
    jobs:
      - back-build-ee-docker-image:
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          filters:
            branches:
              only:
                - fix-templates
      - back-generate-tenant-templates:
          name: 'Benelux'
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: '52.57.74.84'
          env_file: '.env-production-benelux'
      - back-generate-tenant-templates:
          name: 'South America'
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: '52.67.181.38'
          env_file: '.env-web'
      - back-generate-tenant-templates:
          name: 'Canada'
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: '35.183.23.116'
          env_file: '.env-production-canada'
      - back-generate-tenant-templates:
          name: 'US West'
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: '52.13.59.174'
          env_file: '.env-web'
      - back-generate-tenant-templates:
          name: 'UK'
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          ssh_host: '35.179.69.215'
          env_file: '.env-web'
      - back-test-tenant-templates:
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          <<: *slack-fail-post-step-templates
          requires:
            - back-build-ee-docker-image
            - 'Benelux'
            - 'South America'
            - 'Canada'
            - 'US West'
            - 'UK'
      - back-release-tenant-templates:
          context:
            - docker-hub-access
            - slack-dev-notifications-tenant-templates
          requires:
            - back-test-tenant-templates
          post-steps:
            - slack/notify:
                event: pass
                template: basic_success_1
            - slack/notify:
                event: fail
                mentions: ':boom: FAILURE: Some templates are invalid and could not be released.'
                template: basic_fail_1
  check-for-inconsistent-data:
    triggers:
      - schedule:
          cron: "0 2 * * 1"
          filters:
            branches:
              only:
                - production
    jobs:
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: 'Benelux'
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: '52.57.74.84'
          env_file: '.env-production-benelux'
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: 'South America'
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: '52.67.181.38'
          env_file: '.env-web'
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: 'Canada'
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: '35.183.23.116'
          env_file: '.env-production-canada'
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: 'US West'
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: '52.13.59.174'
          env_file: '.env-web'
      - check-for-inconsistent-data:
          <<: *slack-fail-post-step-inconsistent-data
          name: 'UK'
          context:
            - slack-dev-notifications-inconsistent-data
          ssh_host: '35.179.69.215'
          env_file: '.env-web'
      - slack-invalid-data-success:
          name: ':tada: SUCCESS: No invalid data was detected!' # Mentions are not supported for basic_success_1
          context:
            - slack-dev-notifications-inconsistent-data
          requires:
            - 'Benelux'
            - 'South America'
            - 'Canada'
            - 'US West'
            - 'UK'

