import { IRelationship } from 'typings';

import { Keys } from 'utils/cl-react-query/types';

import fileTranscriptKeys from './keys';

export type FileTranscriptKeys = Keys<typeof fileTranscriptKeys>;

export interface IFileTranscript {
  data: IFileTranscriptData;
}

export interface IFileTranscriptData {
  id: string;
  type: string;
  attributes: IFileTranscriptAttributes;
  relationships: {
    file: {
      data: IRelationship;
    };
  };
}

export interface IFileTranscriptAttributes {
  status: 'processing' | 'pending' | 'completed' | 'failed';
  assemblyai_transcript: AssemblyAITranscriptData | null;
  error_message: string | null;
  created_at: string;
  updated_at: string;
}

// NOTE: The following types are based on the AssemblyAI API documentation
// and generated by Claude. As such, they may not be complete or accurate for all use scenarios.
// Make sure to test and adjust as necessary based on future usage.

export interface AssemblyAITranscriptData {
  id: string;
  text: string | null;
  words: TranscriptWord[] | null;
  utterances: TranscriptUtterance[] | null;
  chapters: TranscriptChapter[] | null;
  entities: TranscriptEntity[] | null;
  status: 'queued' | 'processing' | 'completed' | 'error';
  summary: string | null;
  audio_url: string;
  language_code: string | null;
  language_detection: boolean;
  language_confidence: number | null;
  language_confidence_threshold: number | null;
  speech_model: string | null;
  acoustic_model: string;
  confidence: number | null;
  audio_duration: number | null;
  punctuate: boolean;
  format_text: boolean;
  dual_channel: boolean;
  multichannel: boolean | null;
  webhook_url: string | null;
  webhook_status_code: number | null;
  webhook_auth: boolean;
  webhook_auth_header_name: string | null;
  speed_boost: boolean;
  auto_highlights_result: AutoHighlightsResult | null;
  auto_highlights: boolean;
  audio_start_from: number | null;
  audio_end_at: number | null;
  word_boost: string[];
  boost_param: string | null;
  filter_profanity: boolean;
  redact_pii: boolean;
  redact_pii_audio: boolean;
  redact_pii_audio_quality: string | null;
  redact_pii_policies: string[] | null;
  redact_pii_sub: string | null;
  speaker_labels: boolean;
  speakers_expected: number | null;
  content_safety: boolean;
  content_safety_labels: ContentSafetyLabels;
  iab_categories: boolean;
  iab_categories_result: IABCategoriesResult;
  custom_spelling: TranscriptCustomSpelling[] | null;
  disfluencies: boolean;
  throttled: boolean;
  auto_chapters: boolean;
  summarization: boolean;
  summary_type: string | null;
  summary_model: string | null;
  custom_topics: boolean;
  topics: string[];
  speech_threshold: number | null;
  entity_detection: boolean;
  sentiment_analysis: boolean;
  sentiment_analysis_results: SentimentAnalysisResult[] | null;
  is_deleted: boolean | null;
  project_id: number;
  token_id: number;
  prompt: string | null;
  keyterms_prompt: string[];
  speaker_options: Record<string, any> | null;
  language_detection_options: Record<string, any> | null;
  redact_pii_audio_options: string | null;
  custom_topics_results: CustomTopicsResult[] | null;
}

export interface TranscriptWord {
  text: string;
  start: number;
  end: number;
  confidence: number;
  speaker?: string; // Only present when speaker_labels is enabled
}

export interface TranscriptUtterance {
  text: string;
  start: number;
  end: number;
  confidence: number;
  speaker: string;
  words: TranscriptWord[];
}

export interface TranscriptChapter {
  summary: string;
  headline: string;
  gist: string;
  start: number;
  end: number;
}

export interface TranscriptEntity {
  entity_type: string;
  text: string;
  start: number;
  end: number;
}

export interface TranscriptCustomSpelling {
  from: string[];
  to: string;
}

export interface ContentSafetyLabels {
  status: string;
  results: Array<{
    text: string;
    labels: Array<{
      label: string;
      confidence: number;
      severity: number;
    }>;
    sentences_idx_start: number;
    sentences_idx_end: number;
    timestamp: {
      start: number;
      end: number;
    };
  }>;
  summary: Record<string, number>;
  severity_score_summary?: Record<string, number>;
}

export interface CustomTopicsResult {
  text: string;
  labels: Array<{
    relevance: number;
    label: string;
  }>;
  timestamp: {
    start: number;
    end: number;
  };
}

export interface IABCategoriesResult {
  status: string;
  results: Array<{
    text: string;
    labels: Array<{
      relevance: number;
      label: string;
    }>;
    timestamp: {
      start: number;
      end: number;
    };
  }>;
  summary: Record<string, number>;
}

export interface AutoHighlightsResult {
  status: string;
  results: Array<{
    count: number;
    rank: number;
    text: string;
    timestamps: Array<{
      start: number;
      end: number;
    }>;
  }>;
}

export interface SentimentAnalysisResult {
  text: string;
  start: number;
  end: number;
  sentiment: 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE';
  confidence: number;
  speaker?: string; // Only present when speaker_labels is also enabled
}
