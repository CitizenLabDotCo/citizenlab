import React from 'react';

import { colors, Tooltip } from '@citizenlab/cl2-component-library';

import { Report } from 'api/reports/types';
import useCopyReport from 'api/reports/useCopyReport';
import useDeleteReport from 'api/reports/useDeleteReport';

import ButtonWithLink from 'components/UI/ButtonWithLink';

import { useIntl } from 'utils/cl-intl';

import { getRedirectUrl } from '../../CreateReportModal/utils';
import messages from '../messages';

const BaseButton = (props) => {
  // hard-coded values come after the spread operator to override the prop values
  return <ButtonWithLink {...props} mr={'8px'} iconSize={'18px'} />;
};

const ReportRowTooltip = ({ disabled, content, children }) => (
  <Tooltip disabled={disabled} placement="bottom" content={content}>
    <div> {children} </div>
  </Tooltip>
);

interface Props {
  report: Report;
  showDuplicate?: boolean;
}

const Buttons = ({ report, showDuplicate = true }: Props) => {
  const { formatMessage } = useIntl();
  const { mutate: duplicateReport, isLoading: isDuplicating } = useCopyReport();
  const { mutate: deleteReport, isLoading: isDeleting } = useDeleteReport();

  const isLoading = isDuplicating || isDeleting;
  const canEdit = report.attributes.action_descriptors.editing_report.enabled;

  const handleDeleteReport = async () => {
    const reportName = report.attributes.name;

    const message = reportName
      ? formatMessage(messages.confirmDeleteReport, { reportName })
      : formatMessage(messages.confirmDeleteThisReport);

    if (window.confirm(message)) deleteReport(report.id);
  };

  const getEditLink = () => {
    if (
      typeof report.attributes.quarter === 'number' &&
      typeof report.attributes.year === 'number' &&
      report.relationships.layout.data === null
    ) {
      // In this case, the report was autogenerated by the community monitor
      // feature, but it does not have a layout yet. So we open it as a template.
      return getRedirectUrl({
        reportId: report.id,
        template: 'community-monitor',
        year: report.attributes.year,
        quarter: report.attributes.quarter,
      });
    }

    return `/admin/reporting/report-builder/${report.id}/editor`;
  };

  return (
    <>
      <BaseButton
        id="e2e-delete-report-button"
        icon="delete"
        buttonStyle="white"
        textColor={colors.textSecondary}
        onClick={handleDeleteReport}
        processing={isDeleting}
        disabled={isLoading || !canEdit}
      >
        {formatMessage(messages.delete)}
      </BaseButton>

      {showDuplicate && (
        <ReportRowTooltip
          disabled={canEdit}
          content={formatMessage(messages.cannotDuplicateReport)}
        >
          <BaseButton
            icon="copy"
            buttonStyle="secondary-outlined"
            processing={isDuplicating}
            disabled={isLoading || !canEdit}
            onClick={() => duplicateReport({ id: report.id })}
          >
            {formatMessage(messages.duplicate)}
          </BaseButton>
        </ReportRowTooltip>
      )}

      <ReportRowTooltip
        disabled={canEdit}
        content={formatMessage(messages.cannotEditReport)}
      >
        <BaseButton
          icon="edit"
          buttonStyle="secondary-outlined"
          disabled={isLoading || !canEdit}
          linkTo={getEditLink()}
        >
          {formatMessage(messages.edit)}
        </BaseButton>
      </ReportRowTooltip>
    </>
  );
};

export default Buttons;
